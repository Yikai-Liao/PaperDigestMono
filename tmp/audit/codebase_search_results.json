[
  {
    "query": "requests",
    "results": [
      {
        "path": "reference/NotionAPI/working_with_files.md",
        "line": 101,
        "snippet": "### Example requests\n\nThis uploads the file directly from your local system."
      },
      {
        "path": "reference/PaperDigest/script/gemini_handler.py",
        "line": 220,
        "snippet": "with open(jsonl_path, \"w\", encoding='utf-8') as f:\n                    for req in requests:\n                        f.write(json.dumps(req, ensure_ascii=False) + \"\\n\")"
      },
      {
        "path": "tests/feedback/test_feedback_service.py",
        "line": 74,
        "snippet": "with pytest.raises(requests.RequestException):\n            service.fetch_giscus_feedback()"
      },
      {
        "path": "papersys/ingestion/client.py",
        "line": 107,
        "snippet": "@patch(\"papersys.ingestion.client.requests.Session.get\")"
      }
    ]
  },
  {
    "query": "httpx",
    "results": [
      {
        "path": "tests/ingestion/test_client.py",
        "line": 107,
        "snippet": "@patch(\"papersys.ingestion.client.requests.Session.get\")"
      },
      {
        "path": "papersys/summary/fetcher.py",
        "line": 27,
        "snippet": "with urllib.request.urlopen(request, timeout=timeout) as response:  # type: ignore[no-untyped-call]\n        return response.read()"
      }
    ]
  },
  {
    "query": "urllib",
    "results": [
      {
        "path": "papersys/summary/fetcher.py",
        "line": 27,
        "snippet": "with urllib.request.urlopen(request, timeout=timeout) as response:  # type: ignore[no-untyped-call]\n        return response.read()"
      },
      {
        "path": "papersys/summary/fetcher.py",
        "line": 25,
        "snippet": "def _http_get(url: str, *, timeout: int = 30) -> bytes:\n    request = urllib.request.Request(url, headers={\"User-Agent\": USER_AGENT})\n    with urllib.request.urlopen(request, timeout=timeout) as response:  # type: ignore[no-untyped-call]\n        return response.read()"
      }
    ]
  },
  {
    "query": "urllib3",
    "results": [
      {
        "path": "papersys/summary/fetcher.py",
        "line": 27,
        "snippet": "with urllib.request.urlopen(request, timeout=timeout) as response:  # type: ignore[no-untyped-call]\n        return response.read()"
      },
      {
        "path": "tests/ingestion/test_client.py",
        "line": 107,
        "snippet": "@patch(\"papersys.ingestion.client.requests.Session.get\")"
      }
    ]
  },
  {
    "query": "aiohttp",
    "results": []
  },
  {
    "query": "socket",
    "results": [
      {
        "path": "papersys/embedding/service.py",
        "line": 122,
        "snippet": "try:\n            conn.send(result)\n        finally:\n            conn.close()"
      }
    ]
  },
  {
    "query": "openai",
    "results": [
      {
        "path": "reference/PaperDigest/script/summarize.py",
        "line": 96,
        "snippet": "client = OpenAI(\n        api_key=api_key,\n        base_url=base_url,\n    )"
      },
      {
        "path": "reference/PaperDigestAction/src/summarize.py",
        "line": 302,
        "snippet": "client = OpenAI(\n        api_key=llm_config.api_key,\n        base_url=llm_config.base_url\n    )"
      },
      {
        "path": "reference/PaperDigestAction/src/summarize.py",
        "line": 204,
        "snippet": "client = OpenAI(\n                api_key=llm_config.api_key,\n                base_url=llm_config.base_url\n            )"
      }
    ]
  },
  {
    "query": "gemini",
    "results": [
      {
        "path": "reference/PaperDigest/script/summarize.py",
        "line": 190,
        "snippet": "handler = GeminiHandler(api_key=api_key, model=model)"
      },
      {
        "path": "scripts/test_real_gemini_api.py",
        "line": 24,
        "snippet": "logger.info(\"GEMINI_API_KEY found: {}...\", api_key[:10])"
      },
      {
        "path": "reference/PaperDigest/script/gemini_handler.py",
        "line": 31,
        "snippet": "\"\"\"Handler for Gemini API calls with support for direct and batch processing.\"\"\""
      }
    ]
  },
  {
    "query": "huggingface",
    "results": [
      {
        "path": "reference/ArxivEmbedding/script/merge.py",
        "line": 3,
        "snippet": "from huggingface_hub import HfApi, hf_hub_download, upload_file"
      },
      {
        "path": "reference/ArxivEmbedding/script/rss2hg.py",
        "line": 4,
        "snippet": "from huggingface_hub import HfApi, hf_hub_download, upload_file"
      },
      {
        "path": "papersys/embedding/service.py",
        "line": 17,
        "snippet": "from sentence_transformers import SentenceTransformer"
      },
      {
        "path": "tests/backup/test_uploader.py",
        "line": 5,
        "snippet": "from papersys.backup.uploader import HuggingFaceDatasetUploader, LocalUploader"
      }
    ]
  },
  {
    "query": "hf_hub",
    "results": [
      {
        "path": "reference/ArxivEmbedding/script/rss2hg.py",
        "line": 4,
        "snippet": "from huggingface_hub import HfApi, hf_hub_download, upload_file"
      },
      {
        "path": "reference/ArxivEmbedding/script/merge.py",
        "line": 3,
        "snippet": "from huggingface_hub import HfApi, hf_hub_download, upload_file"
      },
      {
        "path": "reference/ArxivEmbedding/script/local_split_tasks.py",
        "line": 97,
        "snippet": "file_path = hf_hub_download(\n                repo_id=repo_id,\n                filename=year_file,\n                repo_type=\"dataset\",\n                local_dir=local_temp_dir, # Download to local temp dir\n                token=hf_token\n            )"
      }
    ]
  },
  {
    "query": "huggingface_hub",
    "results": [
      {
        "path": "reference/ArxivEmbedding/script/rss2hg.py",
        "line": 4,
        "snippet": "from huggingface_hub import HfApi, hf_hub_download, upload_file"
      },
      {
        "path": "reference/ArxivEmbedding/script/merge.py",
        "line": 3,
        "snippet": "from huggingface_hub import HfApi, hf_hub_download, upload_file"
      },
      {
        "path": "papersys/backup/uploader.py",
        "line": 59,
        "snippet": "\"\"\"Uploader that stores the artifact inside a Hugging Face dataset repository.\"\"\""
      }
    ]
  },
  {
    "query": "transformers",
    "results": [
      {
        "path": "papersys/embedding/service.py",
        "line": 17,
        "snippet": "from sentence_transformers import SentenceTransformer"
      },
      {
        "path": "tests/embedding/test_embedding_service.py",
        "line": 110,
        "snippet": "from sentence_transformers import SentenceTransformer"
      },
      {
        "path": "tests/embedding/test_embedding_service.py",
        "line": 85,
        "snippet": "from sentence_transformers import SentenceTransformer"
      }
    ]
  },
  {
    "query": "accelerate",
    "results": []
  },
  {
    "query": "HF_TOKEN",
    "results": [
      {
        "path": "reference/ArxivEmbedding/script/incremental_embed_workflow.py",
        "line": 182,
        "snippet": "if not hf_token:\n        hf_token = os.environ.get(\"HF_TOKEN\")  # 尝试备用环境变量名"
      },
      {
        "path": "papersys/config/embedding.py",
        "line": 67,
        "snippet": "hf_token: str | None = Field(None, description=\"HF token (supports 'env:VAR_NAME' format)\")"
      },
      {
        "path": "reference/ArxivEmbedding/script/local_split_tasks.py",
        "line": 26,
        "snippet": "if not hf_token:\n         print(\"警告: 未找到 HF_TOKEN 环境变量。如果你需要访问私有仓库，请确保已登录 (huggingface-cli login) 或设置了 HF_TOKEN。\")\n         # Set token to None if not found, HfApi might work for public repos\n         hf_token = None"
      }
    ]
  },
  {
    "query": "GEMINI_API_KEY",
    "results": [
      {
        "path": "scripts/test_real_gemini_api.py",
        "line": 24,
        "snippet": "logger.info(\"GEMINI_API_KEY found: {}...\", api_key[:10])"
      },
      {
        "path": "scripts/test_real_gemini_api.py",
        "line": 20,
        "snippet": "if not api_key:\n        logger.error(\"GEMINI_API_KEY environment variable not set\")\n        sys.exit(1)"
      },
      {
        "path": "reference/PaperDigestAction/config.toml",
        "line": 59,
        "snippet": "api_key = \"env:GEMINI_API_KEY\""
      },
      {
        "path": "config/example.toml",
        "line": 168,
        "snippet": "api_key = \"env:GEMINI_API_KEY\""
      }
    ]
  },
  {
    "query": "OPENAI_API_KEY",
    "results": []
  }
]